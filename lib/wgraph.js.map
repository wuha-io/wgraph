{"version":3,"sources":["../src/wgraph.js"],"names":[],"mappings":"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","file":"wgraph.js","sourcesContent":["import util from 'util'\nimport levelup from 'levelup'\nimport levelgraph from 'levelgraph'\nimport rsvp from 'rsvp'\n\nimport Node from './node'\nimport LevelDbProperties from './leveldbprops'\n\nclass WGraph {\n\n  constructor(dbFolder) {\n    this.dbFolder = dbFolder\n    this.db = levelup(this.dbFolder)\n    this.graph = levelgraph(this.db)\n    this.properties = new LevelDbProperties(this.db)\n    this.graph.db = this.db\n    this.graph.properties = this.properties\n  }\n\n  triplet(subject, predicate, object) {\n    return {\n      subject: subject || this.graph.v('subject'),\n      predicate: predicate || this.graph.v('predicate'),\n      object: object || this.graph.v('object')\n    }\n  }\n\n  triplets() {\n    return this.graph.searchStream(this.triplet())\n  }\n\n  node(index, properties) {\n    let node = new Node(this, index)\n    if (properties) node.props.set(properties)\n    return node\n  }\n\n  nodes() {\n    let nodes = {}\n    for (let i in arguments)\n      nodes[arguments[i]] = this.node(arguments[i])\n    return nodes\n  }\n\n  _fetch(fn) {\n    return this.triplets().on('data', fn)\n  }\n\n  count() {\n    return new rsvp.Promise((resolve, reject) => {\n      let nbTriplets = 0\n      this._fetch(() => nbTriplets++)\n        .on('end', () => {\n          resolve(nbTriplets)\n        })\n        .on('error', reject)\n    })\n  }\n\n  del() {\n    return new rsvp.Promise((resolve, reject) => {\n      this._nodes(true, true).then(nodes => {\n        return rsvp.all(nodes.map(n => {\n          return n.del()\n        })).then(() => resolve(this))\n      }).catch(reject)\n    })\n  }\n\n  search() {\n    var args = arguments\n    if (args.length === 1 && Array.isArray(args[0]))\n      return this.search.apply(this, args[0])\n    return new rsvp.Promise((resolve, reject) => {\n      let indexes = []\n      for (let i in args) indexes.push(args[i])\n      let search = this.triplet()\n      search.filter = triplet => {\n        return indexes.indexOf(triplet.subject) > -1\n      }\n      this.graph.search(search, (err, triplets) => {\n        if (err) return reject(err)\n        let result = {}\n        if (!triplets.length) return resolve(result)\n        let nodes = triplets.map(triplet => triplet.subject)\n          .filter((index, i, arr) => arr.indexOf(index) === i)\n          .map(index => new Node(this, index).load())\n        rsvp.all(nodes)\n          .then(nodes => {\n            if (args.length === 1) return resolve(nodes.shift())\n            nodes.forEach(node => result[node.index] = node)\n            resolve(result)\n          }).catch(reject)\n      })\n    })\n  }\n\n  static _nodesMapToArray(nodesMap) {\n    let nodes = []\n    for (let i in nodesMap) nodes.push(nodesMap[i])\n    return nodes\n  }\n\n  //TODO test\n  subGraph() {\n    let name = arguments[0]\n    delete arguments[0]\n    if (!name) throw new Error('Sub graph name required')\n    let args = []\n    for (let i in arguments) args.push(arguments[i])\n    return new rsvp.Promise((resolve, reject) => {\n      this.search.apply(this, args).then(nodes => {\n          nodes = nodes.constructor.name === 'Node' ? [nodes] : WGraph._nodesMapToArray(nodes)\n          return rsvp.all(nodes.map(n => {\n            return n.load(true, true)\n          }))\n        })\n        .then(nodes => {\n          let subGraph = new WGraph(name)\n          let save = []\n          for (let i in nodes) {\n            let sNode = subGraph.node(nodes[i].index)\n            for (let j in nodes[i].edges)\n              sNode.rel(\n                nodes[i].edges[j].predicate,\n                nodes[i].edges[j].object,\n                nodes[i].edges[j].propsMap\n              )\n            save.push(sNode.save())\n          }\n          return rsvp.all(save).then(() => resolve(subGraph))\n        }).catch(reject)\n    })\n  }\n\n  _nodes(syncProps, syncEdgesProps) {\n    return new rsvp.Promise((resolve, reject) => {\n      let indexes = []\n      this._fetch(triplet => {\n        indexes.push(triplet.subject)\n        indexes.push(triplet.object)\n      }).on('end', () => {\n        rsvp.all(indexes.filter((index, i, arr) => {\n            return arr.indexOf(index) === i\n          })\n          .map(index => {\n            return new Node(this, index).load(syncProps, syncEdgesProps)\n          }))\n          .then(nodes => resolve(nodes))\n          .catch(reject)\n      }).on('error', reject)\n    })\n  }\n\n  export() {\n    return new rsvp.Promise((resolve, reject) => {\n      let edges = [];\n      this._nodes(true, true).then(nodes => {\n        nodes = nodes.map(node => node.export(edges))\n        resolve({nodes: nodes, edges: edges})\n      }).catch(reject)\n    })\n  }\n\n}\n\nexport default WGraph\n"]}