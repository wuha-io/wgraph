{"version":3,"sources":["../src/node.js"],"names":[],"mappings":"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","file":"node.js","sourcesContent":["import rsvp from 'rsvp'\r\n\r\nimport NsProperties from './nsprops'\r\nimport Edge from './edge'\r\n\r\nconst SELF_PREDICATE = '_self'\r\n\r\nclass Node {\r\n\r\n  constructor(graph, index) {\r\n    this.graph = graph\r\n    this.index = index\r\n    this.props = new NsProperties('__props:node:' + index, graph.properties)\r\n    this.edges = {}\r\n  }\r\n\r\n  _syncProps() {\r\n    return this.props.map().then(map => {\r\n      this.propsMap = map;\r\n      return this;\r\n    })\r\n  }\r\n\r\n  load(syncProps, syncEdgesProps) {\r\n    return new rsvp.Promise((resolve, reject) => {\r\n      this.graph.graph.search(this.graph.triplet(this.index), (err, triplets) => {\r\n        if (err) return reject(err)\r\n        let load = []\r\n        triplets.forEach(triplet => {\r\n          if (triplet.predicate === SELF_PREDICATE) return\r\n          let edge = new Edge(this, triplet.predicate, new Node(this, triplet.object))\r\n          if (syncEdgesProps) load.push(edge._syncProps())\r\n          this.edges[triplet.predicate + ':' + triplet.object] = edge\r\n        })\r\n        if (syncProps) load.push(this._syncProps())\r\n        return rsvp.all(load).then(() => resolve(this))\r\n      })\r\n    })\r\n  }\r\n\r\n  export(edges) {\r\n    if (Array.isArray(edges)) for (let i in this.edges) edges.push(this.edges[i].export())\r\n    return {index: this.index, props: this.propsMap || {}}\r\n  }\r\n\r\n  _triplets(includeSelf) {\r\n    let triplets = []\r\n    if (includeSelf || !Object.keys(this.edges).length)\r\n      triplets.push(this.graph.triplet(this.index, SELF_PREDICATE, this.index))\r\n    for (let i in this.edges) {\r\n      triplets.push(this.graph.triplet(this.index, this.edges[i].predicate, this.edges[i].object.index))\r\n    }\r\n    return triplets\r\n  }\r\n\r\n  save() {\r\n    return new rsvp.Promise((resolve, reject) => {\r\n      this.graph.graph.put(this._triplets(), err => {\r\n        if (err) return reject(err)\r\n        resolve(this)\r\n      })\r\n    })\r\n  }\r\n\r\n  standalone() {\r\n    return !Object.keys(this.edges).length\r\n  }\r\n\r\n  rel(predicate, node, properties) {\r\n    let edge = new Edge(this, predicate, node)\r\n    this.edges[predicate + ':' + node.index] = edge\r\n    if (properties) edge.props.set(properties)\r\n    return edge\r\n  }\r\n\r\n  del() {\r\n    return new rsvp.Promise((resolve, reject) => {\r\n      return this.load().then(() => {\r\n        let q = []\r\n        for (let i in this.edges) q.push(this.edges[i].del())\r\n        q.push(this.props.clear())\r\n        return rsvp.all(q).then(() => {\r\n          let tripletsTodel = this._triplets(true)\r\n          this.graph.graph.del(tripletsTodel, err => {\r\n            if (err) return reject(err)\r\n            resolve(tripletsTodel.length)\r\n          })\r\n        })\r\n      })\r\n    })\r\n  }\r\n\r\n  toString() {\r\n    let str = 'Node[' + this.index\r\n    for (let i in this.edges)\r\n      str += '\\n  ' + this.edges[i].toString()\r\n    str += '\\n]'\r\n    return str\r\n  }\r\n\r\n}\r\n\r\nNode.SELF_PREDICATE = SELF_PREDICATE\r\n\r\nexport default Node\r\n"]}