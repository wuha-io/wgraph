{"version":3,"sources":["../../src/test/wgraph.js"],"names":[],"mappings":"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","file":"wgraph.js","sourcesContent":["import assert from 'assert'\nimport rsvp from 'rsvp'\n\nimport WGraph from '../wgraph'\nimport Node from '../node'\n\ndescribe('WGraph', () => {\n\n  let graph\n\n  before(done => {\n    graph = new WGraph(__dirname + '/graph')\n    graph.del().then(nbTriplets => {\n      //console.log('%s deleted triplets', nbTriplets)\n      done()\n    }).catch(done)\n  })\n\n  it('should build triplets', () => {\n    let isVariable = (v, name) => {\n      assert.strictEqual(v.constructor.name, 'Variable')\n      assert.strictEqual(v.name, name)\n    }\n    let triplet = graph.triplet()\n    isVariable(triplet.subject, 'subject')\n    isVariable(triplet.predicate, 'predicate')\n    isVariable(triplet.object, 'object')\n    triplet = graph.triplet('brice')\n    assert.strictEqual(triplet.subject, 'brice')\n    isVariable(triplet.predicate, 'predicate')\n    isVariable(triplet.object, 'object')\n    triplet = graph.triplet('brice', 'knows')\n    assert.strictEqual(triplet.subject, 'brice')\n    assert.strictEqual(triplet.predicate, 'knows')\n    isVariable(triplet.object, 'object')\n    triplet = graph.triplet('brice', 'knows', 'arnaud')\n    assert.strictEqual(triplet.subject, 'brice')\n    assert.strictEqual(triplet.predicate, 'knows')\n    assert.strictEqual(triplet.object, 'arnaud')\n  })\n\n  it('should create nodes', () => {\n    let brice = graph.node('brice')\n    assert.strictEqual(brice.constructor.name, 'Node')\n    assert.strictEqual(brice.index, 'brice')\n    let briceAndSacha = graph.nodes('brice', 'sacha')\n    assert.strictEqual(briceAndSacha.brice.constructor.name, 'Node')\n    assert.strictEqual(briceAndSacha.brice.index, 'brice')\n    assert.strictEqual(briceAndSacha.sacha.constructor.name, 'Node')\n    assert.strictEqual(briceAndSacha.sacha.index, 'sacha')\n  })\n\n  describe('Node', () => {\n\n    it('should be loaded even if not exists', done => {\n      let brice = graph.node('brice')\n      assert(brice.standalone())\n      brice.load().then(() => {\n        assert(brice.standalone())\n        done()\n      }).catch(done)\n    })\n\n    it('should be saved (no relations)', done => {\n      let brice = graph.node('brice')\n      assert(brice.standalone())\n      brice.save().then(() => {\n        assert(brice.standalone())\n        let search = graph.triplet(brice.index)\n        graph.graph.search(search, (err, triplets) => {\n          if (err) return done(err)\n          assert.strictEqual(triplets.length, 1)\n          assert.strictEqual(triplets.shift().predicate, Node.SELF_PREDICATE)\n          done()\n        })\n      }).catch(done)\n    })\n\n    it('should have properties', done => {\n      let brice = graph.node('brice')\n      brice.props.clear()\n        .then(() => {\n          return brice.props.map()\n        })\n        .then(data0 => {\n          assert.deepEqual(data0, {})\n          return brice.props.set('age', 28)\n            .then(() => {\n              return brice.props.del('age')\n            })\n            .then(() => {\n              return brice.props.set({sex: 'female', age: 27})\n            })\n            .then(() => {\n              return brice.props.set([['sex', 'male'], ['hair', 'brown']])\n            })\n            .then(() => {\n              return brice.props.map()\n            })\n        }).then(data1 => {\n        assert.deepEqual(data1, {sex: 'male', age: 27, hair: 'brown'})\n        done()\n      }).catch(done)\n    })\n\n    let brice\n    let arnaud\n\n    it('should be related to other nodes', () => {\n      brice = graph.node('brice')\n      arnaud = graph.node('arnaud')\n      let briceKnowsArnaud = brice.rel('knows', arnaud)\n      assert.strictEqual(briceKnowsArnaud.constructor.name, 'Edge')\n      assert.strictEqual(briceKnowsArnaud.subject.index, brice.index)\n      assert.strictEqual(briceKnowsArnaud.predicate, 'knows')\n      assert.strictEqual(briceKnowsArnaud.object.index, arnaud.index)\n    })\n\n    it('should be saved (with relation)', done => {\n      assert(!brice.standalone())\n      brice.save().then(() => {\n        let search = graph.triplet(brice.index)\n        graph.graph.search(search, (err, triplets) => {\n          if (err) return done(err)\n          assert.strictEqual(triplets.length, 2)\n          let rel = triplets.shift()\n          assert.strictEqual(rel.predicate, 'knows')\n          assert.strictEqual(rel.object, arnaud.index)\n          assert.strictEqual(triplets.shift().predicate, Node.SELF_PREDICATE)\n          done()\n        })\n      }).catch(done)\n    })\n\n    describe('should search', () => {\n\n      it('#1 empty', done => {\n        graph.search('antonin').then(nodes => {\n          assert.deepEqual(nodes, {})\n          done()\n        }).catch(done)\n      })\n\n      it('#1 args', done => {\n        let antonin = graph.node('antonin')\n        let sacha = graph.node('sacha')\n        antonin.rel('knows', sacha);\n        rsvp.all([antonin.save(), sacha.save()])\n          .then(() => {\n            return graph.search('antonin', 'sacha')\n          })\n          .then(nodes => {\n            assert.deepEqual(Object.keys(nodes), ['sacha', 'antonin'])\n            assert.strictEqual(nodes.antonin.edges['knows:sacha'].object.index, 'sacha')\n            done()\n          }).catch(done)\n      })\n\n      it('#2 array', done => {\n        graph.search(['antonin', 'sacha'])\n          .then(nodes => {\n            assert.deepEqual(Object.keys(nodes), ['sacha', 'antonin'])\n            done()\n          }).catch(done)\n      })\n\n    })\n\n    it('should be deleted', done => {\n      brice.del().then(() => {\n        let search = graph.triplet(brice.index)\n        graph.graph.search(search, (err, triplets) => {\n          if (err) return done(err)\n          assert.strictEqual(triplets.length, 0)\n          brice.props.map().then(data => {\n            assert.deepEqual(data, {})\n            done()\n          })\n        })\n      }).catch(done)\n    })\n\n  })\n\n  describe('Edges', () => {\n\n    let brice\n    let arnaud\n    let briceKnowsArnaud\n    let expRelTriplet\n\n    before(() => {\n      brice = graph.node('brice')\n      arnaud = graph.node('arnaud')\n      briceKnowsArnaud = brice.rel('knows', arnaud)\n      expRelTriplet = {subject: brice.index, predicate: 'knows', object: arnaud.index}\n    })\n\n    it('should be loaded', done => {\n      briceKnowsArnaud.load().then(() => {\n        assert.deepEqual(briceKnowsArnaud.triplet(), expRelTriplet)\n        done()\n      }).catch(done);\n    })\n\n    it('should be saved', done => {\n      briceKnowsArnaud.save().then(() => {\n        assert.deepEqual(briceKnowsArnaud.triplet(), expRelTriplet)\n        done()\n      }).catch(done);\n    })\n\n    it('should be deleted', done => {\n      briceKnowsArnaud.save()\n        .then(() => {\n          return briceKnowsArnaud.del()\n        })\n        .then(triplet => {\n          briceKnowsArnaud.graph.graph.search(expRelTriplet, (err, triplets) => {\n            if (err) return done(err)\n            assert.strictEqual(triplets.length, 0)\n            done()\n          })\n        }).catch(done);\n    })\n\n    it('should have properties', done => {\n      let attrs = {since: '2015/11/01', colleague: true}\n      briceKnowsArnaud.props.set(attrs)\n        .then(() => {\n          return briceKnowsArnaud.props.map()\n        })\n        .then(data => {\n          assert.deepEqual(data, attrs)\n          done()\n        }).catch(done);\n    })\n\n  })\n\n})\n"]}