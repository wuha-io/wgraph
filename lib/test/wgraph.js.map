{"version":3,"sources":["../../src/test/wgraph.js"],"names":[],"mappings":"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","file":"wgraph.js","sourcesContent":["\nimport assert from 'assert'\nimport rsvp from 'rsvp'\n\nimport WGraph from '../wgraph'\nimport Edge from '../edge'\n\ndescribe('WGraph', () => {\n\n\tlet graph\n\n\tbefore(done => {\n\t\tgraph = new WGraph(__dirname + '/graph')\n    graph.clear().then(nbTriplets => {\n      //console.log('%s deleted triplets', nbTriplets)\n      done()\n    }).catch(done)\n\t})\n\n  it('should build triplets', () => {\n    let isVariable = (v, name) => {\n      assert.strictEqual(v.constructor.name, 'Variable')\n      assert.strictEqual(v.name, name)\n    }\n    let triplet = graph.triplet()\n    isVariable(triplet.subject, 'subject')\n    isVariable(triplet.predicate, 'predicate')\n    isVariable(triplet.object, 'object')\n    triplet = graph.triplet('brice')\n    assert.strictEqual(triplet.subject, 'brice')\n    isVariable(triplet.predicate, 'predicate')\n    isVariable(triplet.object, 'object')\n    triplet = graph.triplet('brice', 'knows')\n    assert.strictEqual(triplet.subject, 'brice')\n    assert.strictEqual(triplet.predicate, 'knows')\n    isVariable(triplet.object, 'object')\n    triplet = graph.triplet('brice', 'knows', 'arnaud')\n    assert.strictEqual(triplet.subject, 'brice')\n    assert.strictEqual(triplet.predicate, 'knows')\n    assert.strictEqual(triplet.object, 'arnaud')\n  })\n\n  it('should create edges', () => {\n    let brice = graph.edge('brice')\n    assert.strictEqual(brice.constructor.name, 'Edge')\n    assert.strictEqual(brice.index, 'brice')\n    let briceAndSacha = graph.edges('brice', 'sacha')\n    assert.strictEqual(briceAndSacha.brice.constructor.name, 'Edge')\n    assert.strictEqual(briceAndSacha.brice.index, 'brice')\n    assert.strictEqual(briceAndSacha.sacha.constructor.name, 'Edge')\n    assert.strictEqual(briceAndSacha.sacha.index, 'sacha')\n  })\n\n  describe('Edge', () => {\n\n    it('should be loaded even if not exists', done => {\n      let brice = graph.edge('brice')\n      assert(brice.standalone())\n      brice.load().then(() => {\n        assert(brice.standalone())\n        done()\n      }).catch(done)\n    })\n\n    it('should be saved (no relations)', done => {\n      let brice = graph.edge('brice')\n      assert(brice.standalone())\n      brice.save().then(() => {\n        assert(brice.standalone())\n        let search = graph.triplet(brice.index)\n        graph.graph.search(search, (err, triplets) => {\n          if (err) return done(err)\n          assert.strictEqual(triplets.length, 1)\n          assert.strictEqual(triplets.shift().predicate, Edge.SELF_PREDICATE)\n          done()\n        })\n      }).catch(done)\n    })\n\n    it('should have properties', done => {\n      let brice = graph.edge('brice')\n      brice.props.clear()\n        .then(() => { return brice.props.map() })\n        .then(data0 => {\n          assert.deepEqual(data0, {})\n          return brice.props.set('age', 28)\n            .then(() => { return brice.props.del('age') })\n            .then(() => { return brice.props.set({sex: 'female', age: 27}) })\n            .then(() => { return brice.props.set([['sex', 'male'], ['hair', 'brown']]) })\n            .then(() => { return brice.props.map() })\n        }).then(data1 => {\n          assert.deepEqual(data1, {sex: 'male', age: 27, hair: 'brown'})\n          done()\n        }).catch(done)\n    })\n\n    let brice\n    let arnaud\n\n    it('should be related to other edges', () => {\n      brice = graph.edge('brice')\n      arnaud = graph.edge('arnaud')\n      let rel = brice.rel('knows', arnaud)\n      assert.strictEqual(rel.constructor.name, 'Relation')\n      assert.strictEqual(rel.subject.index, brice.index)\n      assert.strictEqual(rel.predicate, 'knows')\n      assert.strictEqual(rel.object.index, arnaud.index)\n    })\n\n    it('should be saved (with relation)', done => {\n      assert(!brice.standalone())\n      brice.save().then(() => {\n        let search = graph.triplet(brice.index)\n        graph.graph.search(search, (err, triplets) => {\n          if (err) return done(err)\n          assert.strictEqual(triplets.length, 2)\n          let rel = triplets.shift()\n          assert.strictEqual(rel.predicate, 'knows')\n          assert.strictEqual(rel.object, arnaud.index)\n          assert.strictEqual(triplets.shift().predicate, Edge.SELF_PREDICATE)\n          done()\n        })\n      }).catch(done)\n    })\n\n    it('should search edges', done => {\n      let sacha = graph.edge('sacha')\n      sacha.save()\n        .then(() => { return graph.search('brice', 'sacha') })\n        .then(edges => {\n          assert.deepEqual(Object.keys(edges), ['brice', 'sacha'])\n          assert.strictEqual(edges.brice.relations['knows:arnaud'].object.index, 'arnaud')\n          done()\n        }).catch(done)\n    })\n\n    it('should be deleted', done => {\n      brice.del().then(() => {\n        let search = graph.triplet(brice.index)\n        graph.graph.search(search, (err, triplets) => {\n          if (err) return done(err)\n          assert.strictEqual(triplets.length, 0)\n          brice.props.map().then(data => {\n            assert.deepEqual(data, {})\n            done()\n          })\n        })\n      }).catch(done)\n    })\n\n  })\n\n  describe('Relations', () => {\n\n    let brice\n    let arnaud\n    let rel\n    let expRelTriplet\n\n    before(() => {\n      brice = graph.edge('brice')\n      arnaud = graph.edge('arnaud')\n      rel = brice.rel('knows', arnaud)\n      expRelTriplet = {subject: brice.index, predicate: 'knows', object: arnaud.index}\n    })\n\n    it('should be loaded', done => {\n      rel.load().then(() => {\n        assert.deepEqual(rel.triplet(), expRelTriplet)\n        done()\n      }).catch(done);\n    })\n\n    it('should be saved', done => {\n      rel.save().then(() => {\n        assert.deepEqual(rel.triplet(), expRelTriplet)\n        done()\n      }).catch(done);\n    })\n\n    it('should be deleted', done => {\n      rel.save()\n        .then(() => { return rel.del() })\n        .then(triplet => {\n          rel.graph.graph.search(expRelTriplet, (err, triplets) => {\n            if (err) return done(err)\n            assert.strictEqual(triplets.length, 0)\n            done()\n          })\n        }).catch(done);\n    })\n\n    it('should have properties', done => {\n      let attrs = {since: '2015/11/01', colleague: true}\n      rel.props.set(attrs)\n        .then(() => { return rel.props.map() })\n        .then(data => {\n          assert.deepEqual(data, attrs)\n          done()\n        }).catch(done);\n    })\n\n  })\n\n})\n"]}